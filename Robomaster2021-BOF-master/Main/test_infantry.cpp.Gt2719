#include <unistd.h>

#include"iostream"
#include<opencv2/opencv.hpp>
#include<thread>
#include<time.h>

#include"ImgProdCons.h"
#include"./Pose/AngleSolver.hpp"
#include"./Armor/ArmorDetector.h"


#include <fcntl.h>

#define DEBUG
#define CAMERA_NUMBER 3

//#define serial_time_consumed

using namespace std;
using namespace cv;

static Point2i dev_recode(0.0 , 0.0);

namespace rm
{

void ImgProdCons::init()
{
    //prevent usb port from being blocked
    init_signals();

    //Initialize camera
    _videoCapturePtr->open(0,2);
    _videoCapturePtr->setVideoFormat(640, 480, true);
    _videoCapturePtr->setExposureTime(1,30);
    _videoCapturePtr->setFPS(100);
    _videoCapturePtr->startStream();
    _videoCapturePtr->info();

    //Initilize serial
    _serialPtr->openPort();
    _serialPtr->setDebug(false);
    int self_color=RED;
//    while(_serialPtr->setup(self_color) != Serial::OJBK)
//    {
//        sleep(1);
//    }
    cout << "I am " << (self_color == rm::BLUE ? "blue" : "red") << "." << endl;

    //Initialize angle solver
    AngleSolverParam angleParam;
    angleParam.readFile(CAMERA_NUMBER);//choose camera
    _solverPtr->init(angleParam);
    //_solverPtr->setResolution(_videoCapturePtr->getResolution());

    //Initialize armor detector
    ArmorParam armorParam;
    _armorDetectorPtr->init(armorParam);
    _armorDetectorPtr->setEnemyColor(self_color == rm::BLUE ? rm::RED : rm::BLUE);

    //initialize kalmanFilter
    _armorDetectorPtr->kalman_init();
    //Initialize rune detector
//    _runeDetectorPtr->init();
    //initialize template
    //_armorDetectorPtr->get_Template();

    //cvex::get_Template();
    //cvex::video_write();
    _task = Serial::NO_TASK;
}

void ImgProdCons::sense()
{
//    const string fileName = "/home/dji/Documents/Computer_vision/2021_Robomaster_BOF/Robomaster2021-BOF-master/Analyse/Serial_time_consumed.txt";
//    ofstream ofile(fileName);
//    fstream file(fileName, ios::out);  //clean context
    /* Loop for sensing */
    for(;;)
    {
        FeedBackData feedBackData;
        #ifdef serial_time_consumed
        chrono::high_resolution_clock::time_point startTime = chrono::high_resolution_clock::now();
        #endif //serial_time_consumed


        //_serialPtr->openPort();


        #ifdef serial_time_consumed
        chrono::high_resolution_clock::time_point secondTime = chrono::high_resolution_clock::now();
        #endif //serial_time_consumed

        /* TODO: Handel exceptions when socket suddenly being plugged out. */
        if(_serialPtr->tryFeedBack(feedBackData, chrono::milliseconds(80)) == Serial::OJBK)
        {
            _task = feedBackData.task_mode;
            this_thread::sleep_for(chrono::milliseconds(150));//80
            cout<<"This is thread of sense!!!"<<endl;
        }
        else
        {
            this_thread::sleep_for(chrono::milliseconds(50));
            cout<<"There is a congestion of thread of sense!!!"<<endl;
        }

//        chrono::high_resolution_clock::time_point secondTime = chrono::high_resolution_clock::now();
//        ofile<< (static_cast<chrono::duration<double, std::milli>>(secondTime -startTime)).count()<<endl;
#ifdef serial_time_consumed
        cout<<"serial time consumed:"<<to_string((static_cast<chrono::duration<double, std::milli>>(secondTime -startTime)).count())<<endl;
#endif //serial_time_consumed
        //_serialPtr->closePort();
    }

}

void ImgProdCons::consume()
{
//    chrono::high_resolution_clock::time_point startTime = chrono::high_resolution_clock::now();
    static float detected_success_time = 0.0;
    static float picture_captured = 0.0;
    float detector_success_rate = 0.0;

    const string fileName = "/home/dji/Documents/Computer_vision/2021_Robomaster_BOF/Robomaster2021-BOF-master/Analyse/consume.txt";
    ofstream ofile(fileName);
    fstream file(fileName, ios::out);  //clean context

    /*
     * Variables for serials
     */
    ControlData controlData;


    /*
     * Variables for recording camera
     */
//    VideoWriter writer;
//    bool isRecording = false;
//    bool readyTOrecord = false;

    /*
     *  Variables for angle solve module
     */
    int angleFlag;
    Vec2f targetAngle;

    /*
     * Variables for rune detector
     *
     */
//    std::array<int, 9> runeNumbers;
//    std::vector<int> ledNumbers;
//    int runeFlag;
//    int shootFlag;

    /* Variables for armor detector module */
    int armorFlag;
    int armorType;
    std::vector<cv::Point2f> armorVertex;
    /*
     *  The main loop for task
     */
    Frame frame;
    for(;;)
    {
#ifndef _MSC_VER
        if (_quit_flag)
            return;
#endif
//        if(_serialPtr->getErrorCode() == Serial::SYSTEM_ERROR || !_videoCapturePtr->isOpened())
//        {
//            this_thread::sleep_for(chrono::seconds(3));
//        }
        _task=Serial::AUTO_SHOOT;
        switch(_task)
        {
        case Serial::NO_TASK:
            //cout<< "manual" <<endl;
            break;
//        case Serial::SMALL_BUFF:
//            cout<<"small buff"<<endl;
//            break;
//        case Serial::BIG_BUFF:
//            cout<<"big buff"<<endl;
//            break;
        case Serial::AUTO_SHOOT:
            //cout<<"auto shoot"<<endl;
            break;
        default:
            cout<<"unknown mode"<<endl;
            break;
        }

        if(!_buffer.getLatest(frame)) continue;



//        if(_task == Serial::SMALL_BUFF)
//        {
//        }
//        else if(_task == Serial::BIG_BUFF)
//        {

//        }
        if(_task ==Serial::AUTO_SHOOT)
        {
//            _videoCapturePtr->setExposureTime(1,100);
            //isRecording = false;
            //readyTOrecord = true;

            //_solverPtr->setResolution(Size(640, 480));
#ifdef DEBUG_TIME_CONSUME
            chrono::high_resolution_clock::time_point startTime = chrono::high_resolution_clock::now();
#endif //DEBUG_TIME_CONSUME
            _armorDetectorPtr->loadImg(frame.img);



            armorFlag = _armorDetectorPtr->detect();

#ifdef DEBUG_TIME_CONSUME
            chrono::high_resolution_clock::time_point secondTime = chrono::high_resolution_clock::now();
#endif //DEBUG_TIME_CONSUME

#ifdef ARMOR_SUCCESS_RATE
            if(armorFlag == ArmorDetector::ARMOR_LOCAL || armorFlag == ArmorDetector::ARMOR_GLOBAL) //if detector founded
            {
                detected_success_time += 1.0;
                picture_captured      += 1.0;
            }
            else
            {

                picture_captured      += 1.0;

            }

            detector_success_rate = detected_success_time / picture_captured;

            cout<<"detector_success_rate:   "<<detected_success_time<<"/"<<picture_captured<<"---->"<<detector_success_rate<<endl;
#endif //ARMOR_SUCCESS_RATE

            if(armorFlag == ArmorDetector::ARMOR_LOCAL || armorFlag == ArmorDetector::ARMOR_GLOBAL)
            {

                armorVertex = _armorDetectorPtr->getArmorVertex();
                armorType = _armorDetectorPtr->getArmorType();

                _solverPtr->setTarget(armorVertex, armorType);
                angleFlag = _solverPtr->solve();
                if(angleFlag != rm::AngleSolver::ANGLE_ERROR)
                {
                    targetAngle = _solverPtr->getAngle();

                    controlData.frame_seq   = frame.seq;
                    controlData.shoot_mode  = Serial::BURST_FIRE | Serial::LOW_SPEED;
                    controlData.pitch_dev   = targetAngle[1];
                    controlData.yaw_dev     = targetAngle[0];
                    //Vec2f a=(0.0);
                    //Vec2f b=(0.0);
                    //_armorDetectorPtr->armor_rec.push_back( a);
                    //_armorDetectorPtr->armor_rec.push_back( b);
                    _armorDetectorPtr->armor_rec.push_back( controlData.pitch_dev);


                    //cout<<"armor_rec"<<_armorDetectorPtr->armor_rec[0]<<endl;
                    //cout<<"armor_rec"<<_armorDetectorPtr->armor_rec[1]<<endl;


                    if(CAMERA_NUMBER == 3)
                    {
//                        controlData.pitch_dev   = (targetAngle[1] - 0.68);
//                        controlData.yaw_dev     = (targetAngle[0] + 0.69);

                        controlData.pitch_dev   = (targetAngle[1]  - 5.3 ) * 100;
                        controlData.yaw_dev     = (targetAngle[0]  + 0.0  ) * 100;

//                        controlData.pitch_dev   = 100;
//                        controlData.yaw_dev     = -100;

                        dev_recode = Point2i(controlData.pitch_dev ,controlData.yaw_dev);
                    }
                    if(CAMERA_NUMBER == 6)
                    {
                        controlData.pitch_dev   = targetAngle[1] - 7.2;
                        controlData.yaw_dev     = targetAngle[0] + 2;
                    }
                    if(CAMERA_NUMBER == 7)
                    {
                        controlData.pitch_dev   = targetAngle[1] - 1.7;
                        controlData.yaw_dev     = targetAngle[0] - 0.9;
                    }

                    if(CAMERA_NUMBER == 8)
                    {
                        controlData.pitch_dev   = targetAngle[1] - 4.81;
                        controlData.yaw_dev     = targetAngle[0] -1.75;
                    }

                    //                controlData.speed_on_rail = 0;

#ifdef SENTRY
                    controlData.gimbal_mode = Serial::SERVO_MODE;
#endif



#ifdef DEBUG_TIME_CONSUME
            chrono::high_resolution_clock::time_point thirdTime = chrono::high_resolution_clock::now();
#endif //DEBUG_TIME_CONSUME


//                    cout<<"pitch_dev:"<<controlData.pitch_dev<<endl;
//                    cout<<"yaw_dev:"<<controlData.yaw_dev<<endl;
                    if(_serialPtr->tryControl(controlData, chrono::milliseconds(3)) != Serial::OJBK)
                    {
                        cout<<"not sent"<<endl;
                    }

#ifdef DEBUG_TIME_CONSUME
            chrono::high_resolution_clock::time_point forthTime = chrono::high_resolution_clock::now();
#endif //DEBUG_TIME_CONSUME


//                    FeedBackData feedBackData;
//                    _serialPtr->trytoFeedBack(feedBackData);


//                    chrono::duration<double> time_span = chrono::duration_cast<chrono::duration<double, std::milli>>(secondTime -startTime );

#ifdef DEBUG_TIME_CONSUME
//                    cout<<"consume_of_detect:     "<<to_string((static_cast<chrono::duration<double, std::milli>>(secondTime -startTime)).count())<<endl;
//                    cout<<"consume_of_slove_angle:     "<<to_string((static_cast<chrono::duration<double, std::milli>>(thirdTime -secondTime)).count())<<endl;
//                    cout<<"consume_of_tryControl:     "<<to_string((static_cast<chrono::duration<double, std::milli>>(forthTime -thirdTime)).count())<<endl;
                    cout<<"consume_of_consume:     "<<to_string((static_cast<chrono::duration<double, std::milli>>(forthTime -startTime)).count())<<endl;
#endif //DEBUG_TIME_CONSUME


//                    _solverPtr->showAngle();
                    cout << "Distancs: "<<_solverPtr->getDistance()<<"  "<<"Deviation: " << "["<<(float)controlData.pitch_dev/100.0f << " " << (float)controlData.yaw_dev/100.0f<<"]" << endl;


                }
                 else
                {


                    cout <<"ANGLE_ERROR"<< endl;

                }
            }
            else   //auto shoot but no target
            {
//              _task=Serial::NO_TASK;

//                controlData.frame_seq   = frame.seq;
//                controlData.shoot_mode  = Serial::BURST_FIRE | Serial::LOW_SPEED;

                if(_armorDetectorPtr->Lost_Track() > 5)
                {
                    controlData.pitch_dev   = 0;
                    controlData.yaw_dev     = 0;
                }
//                else
//                {
//                    controlData.pitch_dev   = dev_recode.x;
//                    controlData.yaw_dev     = dev_recode.y;
//                }

//                controlData.pitch_dev   = 100;
//                controlData.yaw_dev     = -100;


                if(_serialPtr->tryControl(controlData, chrono::milliseconds(3)) != Serial::OJBK)
                {
                    cout<<"not sent"<<endl;
                    //cout<<"test"<<endl;
                }
//                FeedBackData feedBackData;
//                _serialPtr->trytoFeedBack(feedBackData);
            }
            cout << "Distancs: "<<_solverPtr->getDistance()<<"/n"<<"Deviation: " << "["<<(float)controlData.pitch_dev/100.0f << " , " << (float)controlData.yaw_dev/100.0f<<"]" << endl;

#ifdef DEBUG_TIME_CONSUME
            ofile<< (static_cast<chrono::duration<double, std::milli>>(secondTime -startTime)).count()<<"\t\t"<<to_string((int)picture_captured)<<"\t"<<to_string(detector_success_rate * 100)<<"%" <<endl;
#endif //DEBUG_TIME_CONSUME
            //cout<< detector_success_rate * 100<<endl;
#ifdef SENTRY
            else
            {
                controlData.gimbal_mode = Serial::PATROL_AROUND;
                if(_serialPtr->tryControl(controlData, chrono::milliseconds(3)) != Serial::OJBK)
                {
                    cout<<"not sent"<<endl;
                }

            }
#endif

//            cout << "Deviation: " << targetAngle << endl;



//            if(readyTOrecord)
//            {
//                _videoCapturePtr->setVideoFormat(640, 480, true);
//                _videoCapturePtr->setExposureTime(200);

//                if(isRecording)
//                {
//                    writer << frame.img;
//                }
//                else
//                {
//                    time_t t;
//                    time(&t);
//                    const string fileName = "/home/zhouyu/Documents/file/Robomaster2018-SEU-OpenSource-master/Saved_Video/Autoshoot/" + to_string(t) + ".avi";
//                    writer.open(fileName, CV_FOURCC('M', 'J', 'P', 'G'), 25, Size(frame.img.size().width, frame.img.size().height));
//                    if(!writer.isOpened())
//                    {
//                        cout << "Capture failed." << endl;
//                        continue;
//                    }
//                    isRecording = true;
//                    cout << "Start capture. " + fileName +" created." << endl;
//                }

//            }
        }
        else
        {
            controlData.frame_seq   = frame.seq;
            controlData.shoot_mode  = Serial::BURST_FIRE | Serial::LOW_SPEED;
            controlData.pitch_dev   = 0;
            controlData.yaw_dev     = 0;
            if(_serialPtr->tryControl(controlData, chrono::milliseconds(3)) != Serial::OJBK)
            {
                cout<<"not sent"<<endl;

            }
//            FeedBackData feedBackData;
//            _serialPtr->trytoFeedBack(feedBackData);

            //            if(readyTOrecord)
            //            {
            //                _videoCapturePtr->setVideoFormat(640, 480, true);
            //                _videoCapturePtr->setExposureTime(200);

            //                if(isRecording)
            //                {
            //                    writer << frame.img;
            //                }
            //                else
            //                {
            //                    time_t t;
            //                    time(&t);
            //                    const string fileName = "/home/nvidia/Robomaster/Robomaster2018/" + to_string(t) + ".avi";
            //                    writer.open(fileName, CV_FOURCC('M', 'J', 'P', 'G'), 25, Size(frame.img.size().width, frame.img.size().height));
            //                    if(!writer.isOpened())
            //                    {
            //                        cout << "Capture failed." << endl;
            //                        continue;
            //                    }
            //                    isRecording = true;
            //                    cout << "Start capture. " + fileName +" created." << endl;
            //                }

            //            }
        }
        //auto t1 = chrono::high_resolution_clock::now();


        // auto t2 = chrono::high_resolution_clock::now();

#ifdef DEBUG
        if(waitKey(1) == 'q')
        {
            return;
        }
        //   cout << "Detection duration: " << (static_cast<chrono::duration<double, std::milli>>(t2 - t1)).count() << " ms" << endl;
#endif

    }
}
}
